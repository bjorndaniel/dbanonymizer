@page "/SaveModal"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
    <div class="large-modal">
        <div class="row">
            <div class="col text-center">
                <h3>Save data</h3>
                <p>The data below is what will be stored in local storage</p>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group row">
                    <label for="Name" class="col-sm-3 col-form-label px-0">Config name:</label>
                    <div class="col-sm-9 px-0">
                        <input type="text" class="form-control" id="connectionString" @bind="@SaveConfigData.Name">
                    </div>
                </div>
            </div>
        </div>
        <div class="row h-75">
            <div class="col">
                <div id="jsonContainer">

                </div>
            </div>
        </div>
        <div class="row mt-auto mb-2">
            <div class="col text-end">
                <button @onclick="@(async () => await SaveConfig())"
                    class="btn btn-primary float-right mx-2">Save</button>
                <button @onclick="@(async () => await Cancel())"
                    class="btn btn-secondary float-right mx-2">Cancel</button>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = null!;
    [Parameter]
    public DBAnonymizerConfig SaveConfigData { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("showJson", JsonSerializer.Serialize(SaveConfigData));
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SaveConfig()
    {
        var saved = await LocalStorage.GetItemAsync<DBAnonymizerConfigs>(nameof(DBAnonymizerConfigs));
        if (saved == null)
        {
            saved = new DBAnonymizerConfigs();
        }
        saved.Configs.Add(SaveConfigData);
        await LocalStorage.SetItemAsync("DBAnonymizerConfigs", JsonSerializer.Serialize(saved));
        await BlazoredModal.CloseAsync(ModalResult.Ok<bool>(true));
    }

    private async Task Cancel() =>
        await BlazoredModal.CloseAsync(ModalResult.Cancel());

}