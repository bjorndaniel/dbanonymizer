@page "/"
@inject AnonymizerService Service
@inject MessageService MessageService
@inject IJSRuntime JSRuntime
@inject IModalService Modal
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="row">
    <div class="col text-center">
        <h2>DB anonymizer</h2>
        <p>removes sensitive user information from your database</p>
    </div>
</div>
<div class="row">
    <div class="col-12 col-md-6 col-lg-6">
        <div class="form-group row">
            <label for="connectionString" class="col-sm-3 col-form-label px-0">Connection string:</label>
            <div class="col-sm-9 px-0">
                <input type="password" class="form-control" id="connectionString" @onkeypress="@KeyPressed"
                    placeholder="Data Source=...;Initial Catalog=...;user=...;password=...;" @bind="@ConnectionString"
                    @onpaste="@(() => StateHasChanged())">
            </div>
        </div>

    </div>
    <div class="col-12 col-md-6 col-lg-6 text-center">
        <button class="btn btn-primary mb-2" disabled="@IsConnectDisabled" @onclick="@(async () => await Connect())">
            Connect
        </button>
        <button class="btn btn-danger mb-2" disabled="@IsExecuteDisabled"
            @onclick="@(async () => await ExecuteReplace())">Execute</button>
        <button class="btn btn-success mb-2" @onclick="@(async () => await Save())">Save config</button>
        <button type="button" class="btn btn-secondary dropdown-toggle mb-2" data-toggle="dropdown" aria-haspopup="true"
            aria-expanded="false">
            Load config
        </button>
        <div class="dropdown-menu">
            @if (SavedConfigs != null)
            {
                foreach (var config in SavedConfigs.Configs)
                {
                    <a class="dropdown-item" href="#" @onclick:preventDefault
                        @onclick="@(() => LoadConfig(config))">@config.Name</a>
                }
            }
                </div>
            </div>
        </div>
        <div class="row status-row">
            <div class="col text-center">
                <p>@StatusMessage</p>
            </div>
        </div>
        @if (!ShowLoading)
{
    <div class="row">
        <div class="col-12 col-md-6 col-lg-3 px-1">
            <div class="border h-100 p-1 table-responsive">
                <h5>Tables</h5>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Filter tables on enter" aria-label="Filter"
                        @bind="@TableFilter" @onkeypress="FilterTables">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="oi oi-question-mark pb-2"></i></span>
                    </div>
                </div>
                <table class="table-dark table-striped table-hover w-100">
                    <tbody>
                        @foreach (var tableName in TableNames.OrderBy(_ => _))
                        {
                            <tr class="p-2 @(SelectedTable == tableName ? "row-selected" : "")">
                                <td class="p-1" @onclick="@(async () => await TableSelected(tableName))">@tableName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3 px-1">
            <div class="border h-100 p-1 table-responsive">
                <h5>Columns</h5>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Filter columns on enter" aria-label="Filter"
                        @bind="@ColumnFilter" @onkeypress="FilterColumns">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="oi oi-question-mark pb-2"></i></span>
                    </div>
                </div>
                <table class="table-dark table-striped table-hover w-100">
                    <tbody>
                        @foreach (var columnName in ColumnNames.OrderBy(_ => _))
                        {
                            <tr class="p-2 @(SelectedColumn == columnName ? "row-selected" : "")">
                                <td class="p-1 td-overflow" @onclick="@(() => ColumnSelected(columnName))">@columnName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <h5>Replace settings</h5>
            <div class="form-group">
                <label for="replaceType">Replace type</label>
        <button type="button" class="btn btn-secondary dropdown-toggle mb-2 w-100" data-toggle="dropdown" aria-haspopup="true"
            aria-expanded="false">
            Select replace type
        </button>
        <div class="dropdown-menu">
            @foreach (var type in ReplaceTypes)
            {
                <a class="dropdown-item" href="#" @onclick:preventDefault
                        @onclick="@(() => SetReplaceType(type))">@type <i class="oi @(GetReplaceIcon(type))"/><span class="text-bold">@(GetReplaceText(type))</span></a>
            }
            </div>
                <small id="replaceHelp" class="form-text text-muted-app">Select the value type to replace.</small>
            </div>
            <div class="form-group">
                <button class="btn btn-success w-100" @onclick="@(() => AddToReplaceList())"
                                                                            disabled="@IsColumnSelectDisabled"><i class="oi oi-plus"></i></button>
                <small class="form-text text-muted-app">Add to replace list.</small>
            </div>
            <div class="form-group">
                <button class="btn btn-warning w-100" disabled="@IsRemoveReplaceDisabled"
                    @onclick="@(() => RemoveFromReplaceList())"><i class="oi oi-minus"></i></button>
                <small class="form-text text-muted-app">Remove from replace list.</small>
            </div>
            <div class="form-group">
                <button class="btn btn-primary w-100" disabled="@IsColumnSelectDisabled"
                    @onclick="@(async () => await ShowExample())"><i class="oi oi-random"></i></button>
                <small class="form-text text-muted-app">Show example for column.</small>
            </div>
              <div class="form-group">
                <label>Selected replace type:</label>
                <h5>@SelectedReplaceType</h5>
            </div>
            <div class="form-group">
                <label>Selected column:</label>
                <h5>@SelectedColumn</h5>
            </div>
            <div class="form-group">
                <label>Before:</label>
                <h5>@BeforeAnonymize</h5>
            </div>
            <div class="form-group">
                <label>After:</label>
                <h5>@AfterAnonymize</h5>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3 px-1">
            <div class="border h-100 p-1 table-responsive">
                <h5>Selected</h5>
                <table class="table-dark table-striped table-hover w-100">
                    <tbody>
                        @foreach (var replace in ReplaceObjects.OrderBy(_ => _.ColumnName))
                        {
                            <tr class="p-2">
                                <td class="p-1 " @onclick="@(() => ReplaceObjectSelected(replace))">@replace.ColumnName
                                    (@replace.TableName)<i class="oi @(GetReplaceIcon(replace.ReplaceType)) pb-1 pl-1"/><span class="text-bold pb-1 pl-1">@(GetReplaceText(replace.ReplaceType))</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (ShowLoading)
{


    <div class="row css-load-parent">
        <div class="col text-center my-auto">
            <div class="cssload-loader-inner">
                <div class="cssload-cssload-loader-line-wrap-wrap">
                    <div class="cssload-loader-line-wrap"></div>
                </div>
                <div class="cssload-cssload-loader-line-wrap-wrap">
                    <div class="cssload-loader-line-wrap"></div>
                </div>
                <div class="cssload-cssload-loader-line-wrap-wrap">
                    <div class="cssload-loader-line-wrap"></div>
                </div>
                <div class="cssload-cssload-loader-line-wrap-wrap">
                    <div class="cssload-loader-line-wrap"></div>
                </div>
                <div class="cssload-cssload-loader-line-wrap-wrap">
                    <div class="cssload-loader-line-wrap"></div>
                </div>
            </div>
        </div>
    </div>
}
@code{
    [CascadingParameter]
    public EventCallback<string> UpdateStatus { get; set; }
    private string StatusMessage { get; set; } = "";
    private string ConnectionString { get; set; } = "";
    private IEnumerable<String> TableNames { get; set; } = new List<string>();
    private IEnumerable<String> ColumnNames { get; set; } = new List<string>();
    private bool IsConnectDisabled => string.IsNullOrWhiteSpace(ConnectionString);
    private bool IsExecuteDisabled => !ReplaceObjects?.Any() ?? true;
    private bool IsColumnSelectDisabled => string.IsNullOrWhiteSpace(SelectedColumn) ||
       string.IsNullOrWhiteSpace(SelectedReplaceType);
    private bool IsRemoveReplaceDisabled => SelectedReplaceObject == null;
    private bool ShowLoading { get; set; }
    private string SelectedTable { get; set; } = "";
    private string TableFilter { get; set; } = "";
    private string ColumnFilter { get; set; } = "";
    private string SelectedColumn { get; set; } = "";
    private List<string> ReplaceTypes { get; set; } = new List<string>();
    private string SelectedReplaceType { get; set; } = "";
    private List<ReplaceObject> ReplaceObjects { get; set; } = new List<ReplaceObject>();
    private ReplaceObject SelectedReplaceObject { get; set; } = null!;
    private string BeforeAnonymize { get; set; } = "";
    private string AfterAnonymize { get; set; } = "";
    private DBAnonymizerConfigs SavedConfigs { get; set; } = new DBAnonymizerConfigs();

    protected override void OnInitialized()
    {
        ReplaceTypes = new List<string>
        {
            "Email",
            "First and last name",
            "First name",
            "Last name",
            "Personal number (yyyymmdd-xxxx)",
            "Phonenumber",
            "Username",
        };
        MessageService.MessageReceived += UpdateUI;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        SavedConfigs = await LocalStorage.GetItemAsync<DBAnonymizerConfigs>(nameof(DBAnonymizerConfigs));
        await InvokeAsync(() => StateHasChanged());
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Connect()
    {
        TableNames = await Service.ConnectToDatabase(ConnectionString);
    }

    private async Task TableSelected(string tableName)
    {
        SelectedTable = tableName;
        ColumnNames = await Service.GetColumns(tableName, ConnectionString);
    }

    private void ColumnSelected(string columnName)
    {
        SelectedColumn = columnName;
    }

    private async Task ShowExample()
    {
        try
        {
            var (before, after) = await Service.ShowExample(SelectedReplaceType, SelectedColumn, SelectedTable, ConnectionString);
            BeforeAnonymize = before;
            AfterAnonymize = after;
        }
        catch (Exception e)
        {
            MessageService.SendMessage(e.ToString());
        }
    }

    private void AddToReplaceList()
    {
        if (!ReplaceObjects.Any(_ => _.ColumnName == SelectedColumn && _.TableName == SelectedTable))
        {
            ReplaceObjects.Add(new ReplaceObject
            {
                ColumnName = SelectedColumn,
                ReplaceType = SelectedReplaceType,
                TableName = SelectedTable
            });
        }
    }

    private void ReplaceObjectSelected(ReplaceObject replace)
    {
        SelectedReplaceObject = replace;
    }

    private void RemoveFromReplaceList()
    {
        ReplaceObjects.Remove(SelectedReplaceObject);
        SelectedReplaceObject = null!;
    }

    private async Task ExecuteReplace()
    {
        try
        {
            ShowLoading = true;
            var shouldExecute = await JSRuntime.InvokeAsync<bool>("shouldExecute");
            if (shouldExecute)
            {
                await InvokeAsync(() => StateHasChanged());
                await Service.ExecuteReplace(ReplaceObjects, ConnectionString);
                ReplaceObjects.Clear();
                SelectedReplaceObject = null!;
            }
        }
        catch (Exception e)
        {
            MessageService.SendMessage(e.ToString());
        }
        finally
        {
            ReplaceObjects.Clear();
            SelectedReplaceObject = null!;
            ShowLoading = false;
            StatusMessage = "";
        }
    }

    private async Task UpdateUI(object sender, MessageEventArgs args)
    {
        StatusMessage = args.Message;
        await InvokeAsync(() => StateHasChanged());
        if (!ShowLoading)
        {
            await Task.Delay(TimeSpan.FromSeconds(3));
            StatusMessage = string.Empty;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Task.Delay(TimeSpan.FromMilliseconds(200));
            await Connect();
        }
    }

    private async Task Save()
    {
        var data = new DBAnonymizerConfig
        {
            ReplaceObjects = ReplaceObjects
        };
        var modalParams = new ModalParameters();
        modalParams.Add("SaveConfigData", data);
        var modal = Modal.Show<SaveModal>("Save replace data", modalParams, new ModalOptions
        {
            DisableBackgroundCancel = true,
            HideCloseButton = true,
            HideHeader = true
        });
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            Console.WriteLine(result.Data);
        }

    }

    private void LoadConfig(DBAnonymizerConfig config)
    {
        ReplaceObjects = config.ReplaceObjects;
    }

    private async Task FilterTables()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        TableNames = TableNames.Where(_ => _.ToLower().Contains(TableFilter));
    }

    private async Task FilterColumns()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        ColumnNames = ColumnNames.Where(_ => _.ToLower().Contains(ColumnFilter));
    }

   private void SetReplaceType(string type)
   {
       SelectedReplaceType = type;
   }
   private string GetReplaceIcon(string type)
   {
       switch(type)
       {
            case "Email":
                return "oi-envelope-closed";
            case "Personal number (yyyymmdd-xxxx)":
                return "oi-credit-card";
            case "Phonenumber":
                return "oi-phone";
            case "Username":
                return "oi-person";
            default:
                return "";
       }
   }
   private string GetReplaceText(string type)
   {
       switch(type)
       {
            case "First name":
                return "F";
            case "Last name":
                return "L";
            case "First and last name":
                return "F&L";
            default:
                return "";
       }
   }
}